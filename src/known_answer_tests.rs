use std::str::FromStr;

use nom::{
    bytes::complete::tag,
    character::complete::{digit0, hex_digit0, line_ending, newline, not_line_ending},
    combinator::{all_consuming, cut, map_res, opt, verify},
    error::VerboseError,
    multi::{many0, many1},
    sequence::delimited,
};

pub type IResult<I, O> = nom::IResult<I, O, VerboseError<I>>;

use hex::FromHex;

use snafu::Snafu;

#[derive(Debug, Snafu)]
#[snafu(display("Error while parsing Test Case: {error}"))]
pub struct ParseError {
    error: String,
}

use crate::pqc_algorithm::{DsaTestCase, DsaTestCases, KemTestCase, KemTestCases};

fn parse_u64_from_tag<'a>(i: &'a str, tag_s: &str) -> IResult<&'a str, u64> {
    map_res(delimited(tag(tag_s), digit0, line_ending), |s: &str| {
        s.parse()
    })(i)
}

fn parse_hex_verify_length<'a>(
    i: &'a str,
    tag_s: &str,
    length_to_verify: usize,
) -> IResult<&'a str, Vec<u8>> {
    let parser = delimited(tag(tag_s), hex_digit0, line_ending);

    // The length of the hex string is checked to be twice the length to verify because each byte
    // is given as two hexadecimal digits
    let (i, h) = verify(parser, |s: &str| s.len() == 2 * length_to_verify)(i)?;

    // Unwrapping here is ok because nom ensures that this is parseable
    let h = Vec::from_hex(h).expect("The parser is broken. This should be a hex string.");

    Ok((i, h))
}

fn parse_kem_test_case<const C: usize, const P: usize, const S: usize>(
    i: &str,
) -> IResult<&str, KemTestCase<C, P, S>> {
    // Throw away some comments like `# Kyber{512, 768, 1024}` first
    let (i, _) = opt(many0(delimited(tag("#"), not_line_ending, line_ending)))(i)?;
    let (i, _) = opt(many0(newline))(i)?;

    let (i, count) = parse_u64_from_tag(i, "count = ")?;
    let (i, seed) = parse_hex_verify_length(i, "seed = ", 48)?;
    let (i, public_key) = parse_hex_verify_length(i, "pk = ", P)?;
    let (i, secret_key) = parse_hex_verify_length(i, "sk = ", S)?;
    let (i, ciphertext) = parse_hex_verify_length(i, "ct = ", C)?;
    let (i, shared_secret) = parse_hex_verify_length(i, "ss = ", 32)?;

    // Optional newline at the end of a test
    let (i, _) = opt(newline)(i)?;

    Ok((
        i,
        KemTestCase {
            count,
            seed: seed.try_into().expect("The parser is broken."),
            public_key: public_key.try_into().expect("The parser is broken."),
            secret_key: secret_key.try_into().expect("The parser is broken."),
            ciphertext: ciphertext.try_into().expect("The parser is broken."),
            shared_secret: shared_secret.try_into().expect("The parser is broken."),
        },
    ))
}

/// Parse a String containing Known Answer Test Cases in the format used by CRYSTALS Kyber.
///
/// An optional comment block followed by empty lines is allowed.
///
/// # Format
///
/// ```text
/// count = 0
/// seed = 0F12...
/// pk = 0F12...
/// sk = 42AB...
/// ct = AABB...
/// ss = FE23...
/// ```
///
/// A newline between the test cases is optional. The hex strings for the parameters and keys must
/// have the correct sizes for the respective Security Level. They are shortened here with `...` for clarity.
fn parse_kem_test_cases<
    const CIPHERTEXT_SIZE: usize,
    const PUBLIC_KEY_SIZE: usize,
    const SECRET_KEY_SIZE: usize,
>(
    i: &str,
) -> Result<KemTestCases<CIPHERTEXT_SIZE, PUBLIC_KEY_SIZE, SECRET_KEY_SIZE>, ParseError> {
    // Cut asserts that the rest of input is empty, just return the Output
    match cut(all_consuming(many1(
        parse_kem_test_case::<CIPHERTEXT_SIZE, PUBLIC_KEY_SIZE, SECRET_KEY_SIZE>,
    )))(i)
    {
        Ok((_, o)) => Ok(KemTestCases(o)),
        Err(e) => match e {
            nom::Err::Failure(e) => ParseSnafu {
                error: nom::error::convert_error(i, e),
            }
            .fail(),
            _ => unreachable!("Unexpected nom error. This is a Bug."),
        },
    }
}

impl<const CIPHERTEXT_SIZE: usize, const PUBLIC_KEY_SIZE: usize, const SECRET_KEY_SIZE: usize>
    FromStr for KemTestCases<CIPHERTEXT_SIZE, PUBLIC_KEY_SIZE, SECRET_KEY_SIZE>
{
    type Err = ParseError;

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        parse_kem_test_cases::<CIPHERTEXT_SIZE, PUBLIC_KEY_SIZE, SECRET_KEY_SIZE>(s)
    }
}

fn parse_dsa_test_case<const P: usize, const S: usize>(
    i: &str,
) -> IResult<&str, DsaTestCase<P, S>> {
    // Throw away some comments like `# Dilithium{2, 3, 5}` first
    let (i, _) = opt(many0(delimited(tag("#"), not_line_ending, line_ending)))(i)?;
    let (i, _) = opt(many0(newline))(i)?;

    let (i, count) = parse_u64_from_tag(i, "count = ")?;
    let (i, seed) = parse_hex_verify_length(i, "seed = ", 48)?;
    let (i, mlen) = parse_u64_from_tag(i, "mlen = ")?;
    let (i, message) = parse_hex_verify_length(
        i,
        "msg = ",
        usize::try_from(mlen).expect("Message is too long for your architecture!"),
    )?;
    let (i, public_key) = parse_hex_verify_length(i, "pk = ", P)?;
    let (i, secret_key) = parse_hex_verify_length(i, "sk = ", S)?;
    let (i, signed_mlen) = parse_u64_from_tag(i, "smlen = ")?;
    let (i, signed_message) = parse_hex_verify_length(
        i,
        "sm = ",
        usize::try_from(signed_mlen).expect("Message is too long for your architecture!"),
    )?;

    // Optional newline at the end of a test
    let (i, _) = opt(newline)(i)?;

    Ok((
        i,
        DsaTestCase {
            count,
            seed: seed.try_into().expect("The parser is broken."),
            message,
            public_key: public_key.try_into().expect("The parser is broken."),
            secret_key: secret_key.try_into().expect("The parser is broken."),
            signed_message,
        },
    ))
}

/// Parse a String containing Known Answer Test Cases in the format used by CRYSTALS Dilithium.
///
/// An optional comment block followed by empty lines is allowed.
///
/// # Format
///
/// ```text
/// count = 0
/// seed = 0F12...
/// mlen = 42
/// msg = 0F12...
/// pk = 0F12...
/// sk = 42AB...
/// ct = AABB...
/// smlen = 1429
/// sm = FE23...
/// ```
///
/// A newline between the test cases is optional. The hex strings for the parameters and keys must
/// have the correct sizes for the respective Security Level and obey their len parameters. They
/// are shortened here with `...` for clarity.
fn parse_dsa_test_cases<const PUBLIC_KEY_SIZE: usize, const SECRET_KEY_SIZE: usize>(
    i: &str,
) -> Result<DsaTestCases<PUBLIC_KEY_SIZE, SECRET_KEY_SIZE>, ParseError> {
    // Cut asserts that the rest of input is empty, just return the Output
    match cut(all_consuming(many1(
        parse_dsa_test_case::<PUBLIC_KEY_SIZE, SECRET_KEY_SIZE>,
    )))(i)
    {
        Ok((_, o)) => Ok(DsaTestCases(o)),
        Err(e) => match e {
            nom::Err::Failure(e) => ParseSnafu {
                error: nom::error::convert_error(i, e),
            }
            .fail(),
            _ => unreachable!("Unexpected nom error. This is a Bug."),
        },
    }
}

impl<const PUBLIC_KEY_SIZE: usize, const SECRET_KEY_SIZE: usize> FromStr
    for DsaTestCases<PUBLIC_KEY_SIZE, SECRET_KEY_SIZE>
{
    type Err = ParseError;

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        parse_dsa_test_cases::<PUBLIC_KEY_SIZE, SECRET_KEY_SIZE>(s)
    }
}

#[cfg(test)]
mod parser_tests {
    use super::*;

    #[test]
    fn u64_from_tag() {
        assert_eq!(
            parse_u64_from_tag("tag = 42\n", "tag = "),
            IResult::Ok(("", 42))
        );
        assert_eq!(
            parse_u64_from_tag("A_rather,long tag = 123456\n", "A_rather,long tag = "),
            IResult::Ok(("", 123456))
        );
        assert_eq!(
            parse_u64_from_tag("PREFIX:0\n", "PREFIX:"),
            IResult::Ok(("", 0))
        );
    }

    #[test]
    fn hex_verify_length() {
        assert_eq!(
            parse_hex_verify_length("0xC0FFEE\n", "0x", 3),
            IResult::Ok(("", vec![0xC0, 0xFF, 0xEE]))
        );
        assert_eq!(
            parse_hex_verify_length("hex = DEADBEEF\n", "hex = ", 4),
            IResult::Ok(("", vec![0xDE, 0xAD, 0xBE, 0xEF]))
        );
    }

    #[test]
    fn kem_test_case() {
        let (rest, test_case) = parse_kem_test_case::<768, 800, 1632>(KEM_TEST_CASE).unwrap();
        assert_eq!(rest, "");
        assert_eq!(test_case.count, 42);
        assert_eq!(test_case.public_key.len(), 800);
        assert_eq!(test_case.secret_key.len(), 1632);
        assert_eq!(test_case.ciphertext.len(), 768);
        assert_eq!(test_case.shared_secret.len(), 32);

        assert_eq!(KEM_TEST_CASE, format!("{}", test_case));
    }

    const KEM_TEST_CASE: &str = r#"count = 42
seed = 061550234D158C5EC95595FE04EF7A25767F2E24CC2BC479D09D86DC9ABCFDE7056A8C266F9EF97ED08541DBD2E1FFA1
pk = 115ACE0E64677CBB7DCFC93C16D3A305F67615A488D711AA56698C5663AB7AC9CE66D547C0595F98A43F4650BBE08C364D976789117D34F6AE51AC063CB55C6CA32558227DFEF807D19C30DE414424097F6AA236A1053B4A07A76BE372A5C6B6002791EBE0AFDAF54E1CA237FF545BA68343E745C04AD1639DBC590346B6B9569B56DBBFE53151913066E5C85527DC9468110A136A411497C227DCB8C9B25570B7A0E42AADA6709F23208F5D496EBAB7843F6483BF0C0C73A40296EC2C6440001394C99CA173D5C775B7F415D02A5A26A07407918587C41169F2B7178755ACC27FC8B19C4C4B3FCD41053F2C74C8A10A8321241B2802432875AE808B9EF1365C7B8A52902F1317BA2FB0269F47930672107B4726FEF64547394D3320C8F120B3C2F4725B0305FAB88CC7981FCB09A76A1CBF7F179F43BB0A4C8B0590857F1E69708466C7F8607391E7BC5268BFD3D7A1DFFCB4ECA2A1C9B597593013D5FC4202EC2B74E57AB76BBCF3632BBAF97CDC418A6F16392838CA9BF45DDF023777B7561833C105190F94F302C59B531900BBC816361FAA5B3380CA3A893104CA7388B185671B3E5FE3790E9A626EC46D9B0B33C7A419AF7B32B6859894F575D82AC5456B5490A7AF8FE61046360589ECBA7244236F4123116B6174AA179249A49195B356C72FC6641F0251812EAA98570B046699070E0819DC2713F469137DFC6A3D7B92B298995EE780369153AC366B06D7249CD09E1B3378FB04399CECB8650581D637C79AE67D6F2CAF6ABACF598159A7792CB3C971D1499D2373AD20F63F03BB59ED137384AC61A7155143B8CA4932612EC915E4CA346A9BCE5DD60417C6B2A89B1CC435643F875BDC5A7E5B3481CF919EA09172FEBC46D4FC3FB0CB9591704EE2DBB61844B2F3314A06BB6C6D34005E485CE667BDC7D098586928D2D91340F00419EA401351A240A0B041058BEFB0C2FD32645B7A2DF8F5CBFD873327C978D7B351A28088438837024C52B9C295CD713646FB5D6C0CCFB470734AC2B2BC8123C2C13DF6938E92455A862639FEB8A64B85163E32707E037B38D8AC3922B45187BB65EAFD465FC64A0C5F8F3F9003489415899D59A543D8208C54A3166529B53922
sk = 6C892B0297A9C7641493F87DAF3533EED61F07F4652066337ED74046DCC71BA03F30960103161F7DEB53A71B11617263FE2A809769CE6D70A85FE600ECE29D7F36A16D331B8B2A9E1DB8C090742DF0739FF060CEB4ECC5AB1C5E55AC97BB66A7F895105D57782B229538E3421544A3421408DBF44910934CC423774F1676FF1C306F97555F57B4AED7A6BAB950A8163C8D318DEA62751BD6ABC5069C06C88F330026A19806A03B97A7696B56DA21827BB4E8DC031152B41B892A9E99ADF6E1963E96578828154F467033846920FBB4B80544E7E8A81AE963CF368C9BA037A8C2AD62E32B6E61C91D75CE005AB30F8099A1F29D7B6305B4DC06E25680BB00992F717FE6C115A8084231CC79DD700EA6912AC7FA0D937BB6A756662230470C189B5AA1653DEB937D5A9C25A21D93B19074FC239D8153539797C7D4AB62649D76AA553736A949022C22C52BAEEC605B32CE9E5B9384903558CA9D6A3ABA90423EEDA01C94198B192A8BA9063497A0C5013307DDD863526471A4D99523EB417F291AAC0C3A581B6DA00732E5E81B1F7C879B1693C13B6F9F7931622429E542AF4069222F045544E0CC4FB24D4448CF2C6596F5CB08624B1185013B6B020892F96BDFD4ADA9179DE727B8D9426E0996B5D34948CE02D0C369B37CBB54D3479ED8B582E9E728929B4C71C9BE11D45B20C4BDC3C74313223F58274E8BA5244447C495950B84CB0C3C273640108A3397944573279328996CDC0C913C958AD620BA8B5E5ECBBB7E13CB9C70BD5AB30EB7488C97001C20498F1D7CC06DA76BF520C658CCADFA2956424557ABEA8AB89239C17833DC3A49B36A9AE9A486940540EB444F97152357E02035939D75A3C025F41A40082382A0733C39B0622B740E407592C62ECAEB1432C445B3703A86F6981A278157EA95A6E92D55E4B972F936C2F0A658280EA2B07A48992DF8937E0A2AC1DCC974FE00AAE1F561FA258E2D259C3E861DCE236039127606FC1CE009003A7BAC942101DCB822B1F3C12BF73238F546E01C36B5A6936192995CC69C63237409CB53C2E35D74890D18885376FA5503B107A2A392115ACE0E64677CBB7DCFC93C16D3A305F67615A488D711AA56698C5663AB7AC9CE66D547C0595F98A43F4650BBE08C364D976789117D34F6AE51AC063CB55C6CA32558227DFEF807D19C30DE414424097F6AA236A1053B4A07A76BE372A5C6B6002791EBE0AFDAF54E1CA237FF545BA68343E745C04AD1639DBC590346B6B9569B56DBBFE53151913066E5C85527DC9468110A136A411497C227DCB8C9B25570B7A0E42AADA6709F23208F5D496EBAB7843F6483BF0C0C73A40296EC2C6440001394C99CA173D5C775B7F415D02A5A26A07407918587C41169F2B7178755ACC27FC8B19C4C4B3FCD41053F2C74C8A10A8321241B2802432875AE808B9EF1365C7B8A52902F1317BA2FB0269F47930672107B4726FEF64547394D3320C8F120B3C2F4725B0305FAB88CC7981FCB09A76A1CBF7F179F43BB0A4C8B0590857F1E69708466C7F8607391E7BC5268BFD3D7A1DFFCB4ECA2A1C9B597593013D5FC4202EC2B74E57AB76BBCF3632BBAF97CDC418A6F16392838CA9BF45DDF023777B7561833C105190F94F302C59B531900BBC816361FAA5B3380CA3A893104CA7388B185671B3E5FE3790E9A626EC46D9B0B33C7A419AF7B32B6859894F575D82AC5456B5490A7AF8FE61046360589ECBA7244236F4123116B6174AA179249A49195B356C72FC6641F0251812EAA98570B046699070E0819DC2713F469137DFC6A3D7B92B298995EE780369153AC366B06D7249CD09E1B3378FB04399CECB8650581D637C79AE67D6F2CAF6ABACF598159A7792CB3C971D1499D2373AD20F63F03BB59ED137384AC61A7155143B8CA4932612EC915E4CA346A9BCE5DD60417C6B2A89B1CC435643F875BDC5A7E5B3481CF919EA09172FEBC46D4FC3FB0CB9591704EE2DBB61844B2F3314A06BB6C6D34005E485CE667BDC7D098586928D2D91340F00419EA401351A240A0B041058BEFB0C2FD32645B7A2DF8F5CBFD873327C978D7B351A28088438837024C52B9C295CD713646FB5D6C0CCFB470734AC2B2BC8123C2C13DF6938E92455A862639FEB8A64B85163E32707E037B38D8AC3922B45187BB65EAFD465FC64A0C5F8F3F9003489415899D59A543D8208C54A3166529B539227FFAD1BC8AF73B7E874956B81C2A2EF0BFABE8DC93D77B2FBC9E0C64EFA01E848626ED79D451140800E03B59B956F8210E556067407D13DC90FA9E8B872BFB8F
ct = EDF24145E43B4F6DC6BF8332F54E02CAB02DBF3B5605DDC90A15C886AD3ED489462699E4ABED44350BC3757E2696FBFB2534412E8DD201F1E4540A3970B055FE3B0BEC3A71F9E115B3F9F39102065B1CCA8314DCC795E3C0E8FA98EE83CA6628457028A4D09E839E554862CF0B7BF56C5C0A829E8657947945FE9C22564FBAEBC1B3AF350D7955508A26D8A8EB547B8B1A2CF03CCA1AABCE6C3497783B6465BA0B6E7ACBA821195124AEF09E628382A1F914043BE7096E952CBC4FB4AFED13609046117C011FD741EE286C83771690F0AEB50DA0D71285A179B215C6036DEB780F4D16769F72DE16FDADAC73BEFA5BEF8943197F44C59589DC9F4973DE1450BA1D0C3290D6B1D683F294E759C954ABE8A7DA5B1054FD6D21329B8E73D3756AFDA0DCB1FC8B1582D1F90CF275A102ABC6AC699DF0C5870E50A1F989E4E6241B60AAA2ECF9E8E33E0FFCF40FE831E8FDC2E83B52CA7AB6D93F146D29DCA53C7DA1DB4AC4F2DB39EA120D90FA60F4D437C6D00EF483BC94A3175CDA163FC1C2828BE4DBD6430507B584BB5177E171B8DDA9A4293C3200295C803A865D6D2166F66BA5401FB7A0E853168600A2948437E036E3BF19E12FD3F2A2B8B343F784248E8D685EB0AFDE6315338730E7A1001C27D8D2A76FA69D157BA1AC7AD56DA5A8C70FE4B5B8D786DC6FC0566BA8E1B8816334D32A3FB1CE7D4D5E4C332AF7B003D091741A3D5C965292255DFF8ED2BBF1F9116BE50C17B8E548748AD4B2E957BBD1953482A2E1718CEC66CD2C81F572D552B7187885E6B8943D6431413C59EBB7E036048490BE5289E95B20A89E8B159F61A9A9886E147568F4C9021F362F02688A1C8C3BB0D24086880E55B6EDB43F3745D2C166DC1CB743C76FE6BE523A893CC764D16435C37851252A81E2FFBA0F18971A3DEE37D4877CB928E36E5235037A6B2057897D518A5F0E348E3AB6D5B52DFC60757F3B41A4FEC7828F1DEEAF4587CCC8EADF647F4D203B2FAA05A649B582340CB4CACE57A30711BE752FACF0227D0A80C4128442DDC544BE805B9CFE8FE9B1237C80F96787CD9281CCF270C1AFC0670D
ss = 0A6925676F24B22C286F4C81A4224CEC506C9B257D480E02E3B49F44CAA3237F
"#;

    #[test]
    fn dsa_test_case() {
        let (rest, test_case) = parse_dsa_test_case::<896, 2096>(DSA_TEST_CASE).unwrap();
        assert_eq!(rest, "");
        assert_eq!(test_case.count, 42);
        assert_eq!(test_case.message.len(), 33);
        assert_eq!(test_case.public_key.len(), 896);
        assert_eq!(test_case.secret_key.len(), 2096);
        assert_eq!(test_case.signed_message.len(), 33 + 1387);

        assert_eq!(DSA_TEST_CASE, format!("{}", test_case));
    }

    const DSA_TEST_CASE: &str = r#"count = 42
seed = 061550234D158C5EC95595FE04EF7A25767F2E24CC2BC479D09D86DC9ABCFDE7056A8C266F9EF97ED08541DBD2E1FFA1
mlen = 33
msg = D81C4D8D734FCBFBEADE3D3F8A039FAA2A2C9957E835AD55B22E75BF57BB556AC8
pk
sk = F5977C8283546A63723BC31D2619124F11DB4658643336741DF81757D5AD3062E00B3F9D338DE90488973787B0916A4A9AE8BEBF4E2BC07A7BC18F1A62215182AF657DDD50B81DB4A85D1E4BB270BC74187FDFCA0DBC7D86DE45EA111F118D9D6A4910757925E9C4B1B92B3A1A17D7FAB2B23BD507460C28A034572B76BC0C07629B0D50BDC81576B700ADED88C34C8719E5D722877A4B77DA6A71E5E9942516AE4BD00237665184DEB753E92E776B4D5704B2555555B5B395EBE54E7557A23B743BC710918DD7697059C83E260A7787381B220E92758DCB741D6EB7BA2366E6878B2B9DD450EA728B977C72AC9E161259308E622B00259BA1E790C2D9847C22C8551E4C97A9ECEA9D1C3DCA98E02055266C1DD3A65992DD3CA43C784EE3E9E1E4D65AB5215B31E7E73699EE85B2B629B65B00CC39713936EE6654E3A7CDEEB87DA664757B7D46B872A153A54E9C5C3A332401984063D92E547C0AE489262E503165D8C69CAB7389C2C006E971DE711D2C5086BBD050E80262048832C0289CBA7A95857A1CCEAB0BB91C349B80E291787009A9560E3DCD36A169C269DC62A200BECC1D1CC6E6889A2DAA0AD517EEE7C1BD8837CCE3516E0686ECE56ED6D61E4827464E23618EE99AC76747A0344DCB193C248E5ECAE8E826655B034CEC97B99B81AB0501C692A992283672B868938145956710E1A2123E9D13B2D56808967808DB6B00BB61739B450515B6A53E43A5B0739D59EE0513A95243360AB821BE5072B5CE5870D1DBB29AD5C0B6AD102467C95B9393958C9DD2277BD92054797C634C5945ECD8DA03E8EC6A68C5E2BBCB26B7CE9922353618788530706284BCD41232D5E6EE32E20C9553C5DA62AB523D80A0434895807977C69BA90EB57C0E4941141D55A9876A27AB987821AB0EA4C851A14B70CDE87EE9666C56913C15D592BC81D0098B35770D02D33BDD3D25773B9070436E9488E1414339504A5AD272D4B510CC5D4EB3737B92E1856DBE0EB09449E36BB490B233A670BD634E4D284D0BE3125CC1CA9DD037B14904057D02ED40728D98BD627652D12A4CB027653A396F2D3E73FA931E0DD9EA3DDB807D32637A529340B2F59DA3F2B688747B8EF1438EAE88F9FBCA18C626E22F69DAB9E41813B8E9235025528AB0F00ED53D29C0541B8623654A2024646D6CFE93134D83969200147A832896DC2892FB086FF641F7B5CC280FAAA3CE123BF088B0A51BF9DC2A1186A8C5972AAF4EA707D8C358F99EF8BD8AFFC02694F1D79839D3938F63F90F0937BB88112C07BBBC7B69E02C33CB56A5F77CB4D05183025D97BFF671A0D0069E9662DB0ED2C0BED691E1985A082FD01126029E3216933A36B1654300516BBEB80B067902C1CA19A48615FAE9C437590DCA410334A84C3813CA91F976616D2FEDC073F6B4332331DF4D1FCD0A2781987AA6357B7EEE364EA83D12369877E23C305867B953EE53AE025EEB1A5343CC0F2D3504BCD5DE3B28689AF93A678C533A31BA985D3F4176E48333F06D2E887AEB519C79173ACE4583E499EA1563B386BD9C7E9C7CDA330FDDC98060521BBB5A678BA34991476A5911D51E1E74CC9BD96B1D69B09B80D50981EA08BFFB48DD4F21F1EDE4D8C80EB14663A42CDA9DB224EE6AD303C6DFC02CE0E61392C8B2A6605800ED8B8C4B2B46694A3019AECB22B62582DEC0192C20079059C2E50D2100549E95066DA4899E23676E9BC2C6967F59622469C03CEFC6E6FC58F66E87778C27D174D83E700E8783D6B565AA2D026F5E5769C778E28F5059E6692B4D16719D03F2FF79BE12718B445F5F54F53DEADACD4622B7A7C85FE36E7D571049D5D256F80237761EBC4B77D1201311E384E83C6D7C10611AD1BB2061332CE3A799EED6DE46BE0604EB732BE282E86E16CFFB7D1417148C9ECEA6838EFAFFCA1C8AE6EBDCA56F62954136CD7CEE0AF2158FF6D25F51C6A06A100CCDF2959F8797E6065ADEB16C7E210849681F2789D24E74498DD6B5C83A92DBBAB0F2AC1CBD9B4CB282912FEC46E8D42BE8FE62BF24403C5B093515667AFEDDFF5F0BD7AF127E69801A1AB28C9DECB8AD07B8ACAA4C32FF2AB9CA9F57E9740DFB4B8C6770CD52140CD8BCAFC5BFCC0EF9D3212AFB5AB9F5D5DAB6E9230DBD0C3F55047C7DF4E35C131E79E287BFD18704213DC695766558A52BAC66A739D69AC049AC625ACD3C7939B54D651DCDDA34FD3B0D6C527296E557A167998657E2B03737F4E98B8DC76D4AD6B1D6C7138D8D68C4F8EDDD4A2F04EE41B09A4D4ED6C5269B7C30028A88E0AF7E27D3135EE7579C7577FFB91F3298D68520695FD1C3D2A85EA6BF05C81C35EDCCCA8CC1C7E8D8576B7035ADF3BFF9AC3895148ECF5FD431D1A776F2866712421947A2E5BF5F62EA74DA14E15ABD2A0DBBF50E21324B6E8EF10F9DAB1704EEF440003725D208636AB25B3A1F8C8077017DB0BA3947A112B31431D50FDB59F394C36F214ABAE3CD3271161474E936E3956154B6FAAC7FD4F2BCE52FDCF5AA86FA018D14AA85284885FFC7263578B6DB3B26E5BF813D5A488E0DD3287825CB4D847CCF9324D3CB124F21905B376E6B8679C2076DC67179DE741D1CDC11314E62F0ED4290981D75AF9597C1FC36D892F476E92B17B8B97185D1F554C3F7374511D77ED2ADBE508ADD8354826DF37E0B721003D301910AF6F81F16E9CB2C9BAC32FAD1CCB79D625FEF5CB92EAB17D55903B1EEF7CD934A7B5A31EBF3F2773A8BA3E549FDF6F87927D2D2A06031191C7002B488D767980BFBDA3477EDC9280ACE4E1D00C3999AB07C3C80153BE78AB35919F801907EA5A4218FCFFC36DB1E7B38F1AEAD1D64A4B12C2B12F5218ABFB5E9C77167FE57D16E75BD40DD573EE35B4FFD77868F45885F267CF16F7CFCBB0AA83C50BF5D7628F7C79A49D410410A200DBECC10AE2A8C4D39AF922C37768623259D33050169D550
smlen = 1420
sm = A459ED9DD561B4B0430B1502212110B4138C3BC16E14DE48E1081F0DF2D13ACED5DC5C16B6E0630B7B48F886848AB6BE65EBDEDE81EF1D0DF4CF3CFFAE07DB78B082D983993D96368A65A3D2954E5DE98739D29723806662672646D6B1681DDDF602762F6767937236FB846E50E8C9105E12E18A78ED8AD7EC900F0CF98295BE59E93837B7777339A7EA74AAA6E354354EEDC5835B3C6831E912938654D64765013B10AF03C98BC8BD8856F9EC96CF0CFE80E30FA1E9E3973E9BCD94DB4C53D23E24ED47C11C19CCD0DD38DA8DF210A90C91E107987C80A42D3CD8C28C1B42B4214C27E275229423113712276BF2B226F650830E356036ED68D33ACB6FB3FC17003D00D0230B88B68067023229202E2E31E1123331711313F481871F7893BBB5BE5B8C72B928972538F7807368167E67E1EE4F01021599930E36E91DDD19CE9DD32BA9C092D4F4514B1F474D16D6648CB153153BD92978A28234A7167B6AA505C65960D3E0510A1E47B0A9089B7FA2EB22BA2BC545515CC8427428441C9ECDE2D93383882F887A1B41B711FAF1F61D6F2E19009001EA2CD2CE22EABEF0F20BAF654C57C62551F51455D6E37E3CEE7C86B06708F438718C13F049C19C14C6F8F28B2F4AC3AA35ACC1D9559D5DD810A8138190C4B4474CB9610D1CD63A2D22D922B2B4BA47AB0DD4BD3EDD30CDF7D27C22019212205779BF96F7441B98B681EF860C71C83174774677E975C85F873A88D8858848E76D74DE343020060376E118198E0395DF4EF902E16D0DDE6C4F40F6047BFF41F31F77525027056CE893883E7763CD36D65ADFD4F24D0FE9368F6E2A1D2BD3B13622B02402F98F09F5980A2227217255F91E95EFE23B7CB9C3CF9C8ECCE95A3CA3C53314DC40C80D6A56DE67E58BBE83EA3BFF42F62A646C9E73E439E287DC7BC8AE61C41E462A4107147406BF82F12B2A38318213E4E2692B9E0BB65D5FDBE16CA3C736E2DA9EABED1B687D81D603EE1BE2BE5E02022720810D1DD8D0E034AF4CF30FA7396E9ADB6FD6FE66F1938C36C9E6A2702C0A8058978775FB10120C21ED16CC73C19FAB06BC6AC3BFC8FB8B24D5F5535DFCE91BA6BE87796B94B7CA08018D10E27AC0B40702BAFD9DDB04F8977F7F8A16D86981ED4FAF00F527DFABF8BD4C253A50A201BF0AF2AB9C2DFEDDE268EE7FE6FEBD6F66FC66D1E0470C7EE5F39E3AEFE1D9039F3D6B05B35330036CD3BF36D570710C172A0DDCD3C014D139139DF432832D332CD07C01CD4AB27D26DBDFBD8BD8BB733D72D523FB50050955FEF71A7BAF0FCA1DA3DC7BE5225A2E23D32C2DCD4FEC58CA8E8E70FA07A727ED4FD0FE9AB91A9BABAB0D4AD5A03C602B05B6FBC033123C098074FF4702530D34D501988F7DF9B96732852658923128191FE4F7457E94101B05B111546C47C5DE0A91AB10A3F470470F65D37F33FDF12059109228F7B6716F02F273223FDF71DA1EA71E88CF82F81C7EFEE0E7C0ABD5C35A3F016512509536D86A8377650C56C615A1FA13AA968D0ED1E87ED537567D6F3AC6A16358F39E31EFE3F6506E0F60BA0DA3DB04204D00D25C96266869E9D917A17D3DD9D5975DF6944C4EC95201911810C20E79EA9001E71E71EE08709FFEF6A32D2FDBF24B07917710B2F4384A8FAA843F49F8114F3EEFE42FE328368E1C003301305125D85682CCA6736C3AA7AE43EF3A638324344865DC02C72D9B34E64C63EDAF47FC7A78D815885D009F2EF3E9CBFAC9A99FCEAD28DF8A700C81C610B4D6956E5D9A71391497A896CF63F92D7CB9C097A87CC1C6172AAB48B08A1A31355D8E95A5F0F10B5D6C70769BB3EB020A101253545C63696C828993979BA6ABBDC1D0EB0000000000000000000000000000000000000000000000000000091126242024113A250100A00550210580030101E2A22CA00300111601A48000962400392D3DE82CA91000D81C4D8D734FCBFBEADE3D3F8A039FAA2A2C9957E835AD55B22E75BF57BB556AC8
"#;
}
